<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi" xmlns:util="http://schemas.microsoft.com/wix/UtilExtension">

  <?define PRODUCT_ID  = "F8A4F982-5CEE-42F7-A92E-C8683823F3F9" ?>
  <?define UPGRADE_CODE = "55EFFF59-9195-4414-828E-C3ABF13BF7D2" ?>
  <?define LICENSE_AGREEMENT_FILE_COMPONENT_GUID = "F5DFD476-505D-4298-B575-07578809E5E3" ?>
  <?define HELP_FILE_COMPONENT_GUID = "D4E72720-53FF-445D-B514-D62F316F29B4" ?>
  <?define HELP_FILE_SHORTCUT_COMPONENT_GUID = "32886003-6880-43CB-B897-9AFBA7326EEF" ?>
  <?define VS2008_DLL_FILE_COMPONENT_GUID = "F3749C8E-B6E7-480A-BFBA-90614BA43BBC" ?>
  <?define VS2010_DLL_FILE_COMPONENT_GUID = "74D285DC-02A4-494D-84C0-F16449CDC511" ?>
  <?define VS2012_DLL_FILE_COMPONENT_GUID = "74D285DC-0204-494D-84C0-F16449CDC511" ?>
  <?define VS2008_ADDIN_FILE_COMPONENT_GUID = "C8759D54-B18A-4A72-AAEE-EB5E1AE8EC0A" ?>
  <?define VS2010_ADDIN_FILE_COMPONENT_GUID = "4CBBE54B-A1D2-4D52-9FED-D29B380AA542" ?>
  <?define VS2012_ADDIN_FILE_COMPONENT_GUID = "93D9523A-D1C5-44A2-85A5-AB57E65D222E" ?>
  <?define APP_NAME = "Aspose Visual Studio Plugin" ?>
  <?define APP_VERSION = "1.0.0.0" ?>
  <?define DEFAULT_GROUP_NAME = "Aspose" ?>
  <?define HELP_SHORTCUT = "My Add-In Help File" ?>

  <?define DEST_SUB_DIR = "Aspose" ?>
  <?define HELP_FILE_NAME = "MyAddIn.chm" ?>
  <?define LICENSE_AGREEMENT_FILE_NAME = "License.rtf" ?>
  <?define DLL_FILE_NAME_VS2008 = "AsposeVisualStudioPlugin8.dll" ?>
  <?define DLL_FILE_NAME_VS2010 = "AsposeVisualStudioPlugin.dll" ?>
  <?define DLL_FILE_NAME_VS2012 = "AsposeVisualStudioPlugin12.dll" ?>
  <?define DLL_FILE_NAME_VS2008_PATH = "..\..\out\AsposeVisualStudioPlugin8.dll" ?>
  <?define DLL_FILE_NAME_VS2010_PATH = "..\..\out\AsposeVisualStudioPlugin.dll" ?>
  <?define DLL_FILE_NAME_VS2012_PATH = "..\..\out\AsposeVisualStudioPlugin12.dll" ?>

  <?define ADDIN_XML_FILE_NAME = "AsposeVisualStudioPlugin.AddIn" ?>
  <?define ADDIN_XML_FILE_NAME_PATH = "..\..\out\AsposeVisualStudioPlugin.AddIn" ?>

  <?define DLL_ICONICZIP_FILE_NAME = "Ionic.Zip.dll" ?>
  <?define DLL_ICONICZIP_FILE_NAME_PATH = "..\libs\Ionic.Zip.dll" ?>

  <?define DLL_NGIT_FILE_NAME = "NGit.dll" ?>
  <?define DLL_NGIT_FILE_NAME_PATH = "..\libs\git\NGit.dll" ?>

  <?define DLL_NSCH_FILE_NAME = "NSch.dll" ?>
  <?define DLL_NSCH_FILE_NAME_PATH = "..\libs\git\NSch.dll" ?>

  <?define DLL_SHARPEN_FILE_NAME = "Sharpen.dll" ?>
  <?define DLL_SHARPEN_FILE_NAME_PATH = "..\libs\git\Sharpen.dll" ?>
 <!--
  
  <?define ADDIN_XML_FILE_NAME = "AsposeVisualStudioPlugin.AddIn" ?>
  <?define ADDIN_XML_FILE_NAME_PATH = "..\..\out\AsposeVisualStudioPlugin.AddIn" ?>
-->

  <?define MY_COMPANY_NAME = "Aspose" ?>
  <?define MY_COMPANY_WEB_SITE = "http://www.aspose.com" ?>

  <!-- Ensure that these values are used for the Connect class -->
  <?define CONNECT_CLASS_FULL_NAME_VS_2005 = "AsposeVisualStudioPlugin.Connect" ?>
  <?define CONNECT_CLASS_FULL_NAME_VS_2008 = "AsposeVisualStudioPlugin.Connect" ?>
  <?define CONNECT_CLASS_FULL_NAME_VS_2010 = "AsposeVisualStudioPlugin.Connect" ?>
  <?define CONNECT_CLASS_FULL_NAME_VS_2012 = "AsposeVisualStudioPlugin.Connect" ?>

  <!--
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    END CUSTOMIZATION SECTION
    !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   -->

  <Product Id="$(var.PRODUCT_ID)"
           Name="$(var.APP_NAME)"
           Language="1033"
           Codepage="1252"
           Version="$(var.APP_VERSION)"
           Manufacturer="$(var.MY_COMPANY_NAME)"
           UpgradeCode="$(var.UPGRADE_CODE)">

    <!-- Define the package indicating that the installation is for "Just me", not "All users" -->
    <Package InstallScope="perMachine" InstallerVersion="200" Compressed="yes" />

    <Media Id="1" Cabinet="media1.cab" EmbedCab="yes" />


    <!-- Properties to get the installation folders of Visual Studio 2005, 2008 or 2010.
           If the values can't be retrieved the properties will remain unset (with the FALSE value) and can be used 
           in boolean expressions later.
           The properties must be secure in order to the Repair, Change and Remove buttons of the maintenance mode to work correctly.
      -->
    <Property Id="VS2005INSTALLATIONFOLDER" Secure="yes">
      <RegistrySearch Id="VS2005InstallationFolderRegistrySearchId" Type="raw"
                      Root="HKLM" Key="SOFTWARE\Microsoft\VisualStudio\8.0" Name="InstallDir"></RegistrySearch>
    </Property>
    <Property Id="VS2008INSTALLATIONFOLDER" Secure="yes">
      <RegistrySearch Id="VS2008InstallationFolderRegistrySearchId" Type="raw"
                      Root="HKLM" Key="SOFTWARE\Microsoft\VisualStudio\9.0" Name="InstallDir"></RegistrySearch>
    </Property>
    <Property Id="VS2010INSTALLATIONFOLDER" Secure="yes">
      <RegistrySearch Id="VS2010InstallationFolderRegistrySearchId" Type="raw"
                      Root="HKLM" Key="SOFTWARE\Microsoft\VisualStudio\10.0" Name="InstallDir"></RegistrySearch>
    </Property>


    <Property Id="VS2012INSTALLATIONFOLDER" Secure="yes">
      <RegistrySearch Id="VS2012InstallationFolderRegistrySearchId" Type="raw"
                      Root="HKLM" Key="SOFTWARE\Microsoft\VisualStudio\11.0" Name="InstallDir"></RegistrySearch>
    </Property>

    <PropertyRef Id="NETFRAMEWORK40FULL"/>
    <Condition Message="This application requires .NET Framework 4.0. Please install the .NET Framework then run this installer again. Contact support at marketplace@aspose.com if you have further issues.">
      <![CDATA[Installed OR NETFRAMEWORK40FULL]]>
    </Condition>

    <!-- Launch condition: check that some Visual Studio version is present when the installing.
           The OR'ed Installed variable ensures that the condition is always true when uninstalling, because we don't
           need to check that Visual Studio is present when uninstalling.
      -->
    <Condition Message="This add-in requires Visual Studio 2008, 2010 or 2012">
      Installed OR VS2008INSTALLATIONFOLDER OR VS2010INSTALLATIONFOLDER OR VS2012INSTALLATIONFOLDER
    </Condition>

    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="GAC" Name="GAC">

        <Component Id="ICSharpCode" Guid="28C5F821-0394-470D-A3B0-E0898C5529C4" DiskId="1">

          <!-- Runtime, assembly in GAC -->
          <File Id="ICSharpCode.SharpZipLib" Name="ICSharpCode.SharpZipLib.dll" Assembly=".net" KeyPath="yes"   Source="..\libs\ICSharpCode.SharpZipLib.dll"  DiskId="1" />
          <!--<File Id="F_RT_MyControl" Name="MyCtrl.dll" LongName="MyControl.dll" Source="$(var.SrcPath)\MyControl.dll" KeyPath="yes" Assembly=".net"/>-->

        </Component>

      </Directory>
      <!-- Install the files in a subfolder of the AppDataFolder folder (CSIDL_APPDATA) -->
      <Directory Id="AppDataFolder">

        <Directory Id="INSTALLLOCATION" Name="$(var.DEST_SUB_DIR)">


          <!-- Install the license agreement -->
          <Component Id="LicenseAgreementFileComponentId" Guid="$(var.LICENSE_AGREEMENT_FILE_COMPONENT_GUID)">

            <File Id="LicenseAgreementFileId" Name="$(var.LICENSE_AGREEMENT_FILE_NAME)" Vital="yes" DiskId="1"
                  Source="$(var.LICENSE_AGREEMENT_FILE_NAME)" />


            <!-- This registry entry used as KeyPath is required to avoid the following warnings:
                  ICE38: Component <x> installs to user profile. It must use a registry key under HKCU as its KeyPath not a file.
                  -->
            <RegistryValue Root="HKCU" Key="Software\[Manufacturer]\[ProductName]\LicenseFile" Name="Installed"
                           Type="integer" Value="1" KeyPath="yes"/>

            <!-- Ensure that the folder is removed when uninstalling -->
            <RemoveFolder Id="INSTALLLOCATION" On="uninstall"/>

          </Component>

          <!-- Install the help file -->
          <!--<Component Id="HelpFileComponentId" Guid="$(var.HELP_FILE_COMPONENT_GUID)">

            <File Id="HelpFileId" Name="$(var.HELP_FILE_NAME)" Vital="yes" DiskId="1" Source="$(var.HELP_FILE_NAME)" />

            -->
          <!-- This registry entry used as KeyPath is required to avoid the following warnings:
                  ICE38: Component <x> installs to user profile. It must use a registry key under HKCU as its KeyPath not a file.
                  -->
          <!--
            <RegistryValue Root="HKCU" Key="Software\[Manufacturer]\[ProductName]\HelpFile" Name="Installed" Type="integer"
                           Value="1" KeyPath="yes"/>

          </Component>-->

         
          <!-- Install the dll file of the add-in for Visual Studio 2008 -->
          <Component Id="VS2008DllFileComponentId" Guid="$(var.VS2008_DLL_FILE_COMPONENT_GUID)">

            <File Id="VS2008DllFileId" Name="$(var.DLL_FILE_NAME_VS2008)" Vital="yes" DiskId="1" Source="$(var.DLL_FILE_NAME_VS2008_PATH)" />
            <File Id="VS2008IonicDllFileId" Name="$(var.DLL_ICONICZIP_FILE_NAME)" Vital="yes" DiskId="1" Source="$(var.DLL_ICONICZIP_FILE_NAME_PATH)" />
            <File Id="VS2008NgitDllFileId" Name="$(var.DLL_NGIT_FILE_NAME)" Vital="yes" DiskId="1" Source="$(var.DLL_NGIT_FILE_NAME_PATH)" />
            <File Id="VS2008NschDllFileId" Name="$(var.DLL_NSCH_FILE_NAME)" Vital="yes" DiskId="1" Source="$(var.DLL_NSCH_FILE_NAME_PATH)" />
            <File Id="VS2008SharpenDllFileId" Name="$(var.DLL_SHARPEN_FILE_NAME)" Vital="yes" DiskId="1" Source="$(var.DLL_SHARPEN_FILE_NAME_PATH)" />
            <!-- This registry entry used as KeyPath is required to avoid the following warnings:
                  ICE38: Component <x> installs to user profile. It must use a registry key under HKCU as its KeyPath not a file.
                  -->
            <RegistryValue Root="HKCU" Key="Software\[Manufacturer]\[ProductName]\VS2008DllFile" Name="Installed" Type="integer"
                           Value="1" KeyPath="yes"/>

          </Component>

          <!-- Install the dll file of the add-in for Visual Studio 2010 -->
          <Component Id="VS2010DllFileComponentId" Guid="$(var.VS2010_DLL_FILE_COMPONENT_GUID)">

            <File Id="VS2010DllFileId" Name="$(var.DLL_FILE_NAME_VS2010)" Vital="yes" DiskId="1" Source="$(var.DLL_FILE_NAME_VS2010_PATH)" />
            <File Id="VS2010IonicDllFileId" Name="$(var.DLL_ICONICZIP_FILE_NAME)" Vital="yes" DiskId="1" Source="$(var.DLL_ICONICZIP_FILE_NAME_PATH)" />
            <File Id="VS2010NgitDllFileId" Name="$(var.DLL_NGIT_FILE_NAME)" Vital="yes" DiskId="1" Source="$(var.DLL_NGIT_FILE_NAME_PATH)" />
            <File Id="VS2010NschDllFileId" Name="$(var.DLL_NSCH_FILE_NAME)" Vital="yes" DiskId="1" Source="$(var.DLL_NSCH_FILE_NAME_PATH)" />
            <File Id="VS2010SharpenDllFileId" Name="$(var.DLL_SHARPEN_FILE_NAME)" Vital="yes" DiskId="1" Source="$(var.DLL_SHARPEN_FILE_NAME_PATH)" />

            <!-- This registry entry used as KeyPath is required to avoid the following warnings:
                  ICE38: Component <x> installs to user profile. It must use a registry key under HKCU as its KeyPath not a file.
                  -->
            <RegistryValue Root="HKCU" Key="Software\[Manufacturer]\[ProductName]\VS2010DllFile" Name="Installed" Type="integer"
                           Value="1" KeyPath="yes"/>

          </Component>

          <!-- Install the dll file of the add-in for Visual Studio 2010 -->
          <Component Id="VS2012DllFileComponentId" Guid="$(var.VS2012_DLL_FILE_COMPONENT_GUID)">

            <File Id="VS2012DllFileId" Name="$(var.DLL_FILE_NAME_VS2012)" Vital="yes" DiskId="1" Source="$(var.DLL_FILE_NAME_VS2012_PATH)" />
            <File Id="VS2012IonicDllFileId" Name="$(var.DLL_ICONICZIP_FILE_NAME)" Vital="yes" DiskId="1" Source="$(var.DLL_ICONICZIP_FILE_NAME_PATH)" />
            <File Id="VS2012NgitDllFileId" Name="$(var.DLL_NGIT_FILE_NAME)" Vital="yes" DiskId="1" Source="$(var.DLL_NGIT_FILE_NAME_PATH)" />
            <File Id="VS2012NschDllFileId" Name="$(var.DLL_NSCH_FILE_NAME)" Vital="yes" DiskId="1" Source="$(var.DLL_NSCH_FILE_NAME_PATH)" />
            <File Id="VS2012SharpenDllFileId" Name="$(var.DLL_SHARPEN_FILE_NAME)" Vital="yes" DiskId="1" Source="$(var.DLL_SHARPEN_FILE_NAME_PATH)" />

            <!-- This registry entry used as KeyPath is required to avoid the following warnings:
                  ICE38: Component <x> installs to user profile. It must use a registry key under HKCU as its KeyPath not a file.
                  -->
            <RegistryValue Root="HKCU" Key="Software\[Manufacturer]\[ProductName]\VS2012DllFile" Name="Installed" Type="integer"
                           Value="1" KeyPath="yes"/>

          </Component>


        </Directory>

        <!-- Install the .AddIn XML files in folders where Visual Studio can find them:   
              - Windows XP: "C:\Documents and Settings\<username>\Application Data\Microsoft\VisualStudio\8.0\AddIns"
                (9.0 for VS 2008, 10.0 for VS 2010)
              - Windows Vista / Windows 7: "C:\Users\<username>\AppData\Roaming\Microsoft\VisualStudio\8.0\AddIns"
                (9.0 for VS 2008, 10.0 for VS 2010)
              
              See: "INFO: Default .AddIn file locations for Visual Studio add-ins"
                   http://www.mztools.com/articles/2008/MZ2008001.aspx
            -->
        <Directory Id="MicrosoftDirId" Name="Microsoft">

          <Directory Id="VisualStudioDirId" Name="VisualStudio">

            

            <Directory Id="Dir90Id" Name="9.0">

              <Directory Id="Dir90AddInsId" Name="AddIns">

                <Component Id="VS2008AddInFileComponentId" Guid="$(var.VS2008_ADDIN_FILE_COMPONENT_GUID)">

                  <!-- Copy the .AddIn file to the folder -->
                  <File Id="VS2008AddInFileId" Name="$(var.ADDIN_XML_FILE_NAME)" Vital="yes" DiskId="1"
                        Source="$(var.ADDIN_XML_FILE_NAME_PATH)" />

                  <!-- Modify the Version XML element inside the .AddIn file whose Id is VS2008AddInFileId
                                to set the value "9.0" (which is the version of VS 2008) -->
                  <util:XmlFile Id="VS2008SetVersionElement" Action="setValue" File="[#VS2008AddInFileId]"
                                ElementPath="/Extensibility/HostApplication/Version" Value="9.0" Sequence="1" />

                  <!-- Modify the Assembly XML element inside the .AddIn file whose Id is VS2008AddInFileId
                                to set value of the file whose Id is VS2008DllFileId -->
                  <util:XmlFile Id="VS2008SetAssemblyElement" Action="setValue" File="[#VS2008AddInFileId]"
                                ElementPath="/Extensibility/Addin/Assembly" Value="[#VS2008DllFileId]" Sequence="1" />

                  <!-- Modify the FullClassName XML element inside the .AddIn file whose Id is VS2008AddInFileId
                                to set value of the variable CONNECT_CLASS_FULL_NAME_VS_2008 -->
                  <util:XmlFile Id="VS2008SetFullClassNameElement" Action="setValue" File="[#VS2008AddInFileId]"
                                ElementPath="/Extensibility/Addin/FullClassName"
                                Value="$(var.CONNECT_CLASS_FULL_NAME_VS_2008)" Sequence="1" />

                  <!-- This registry entry used as KeyPath is required to avoid the following warnings:
                                ICE38: Component <x> installs to user profile. It must use a registry key under HKCU as its KeyPath not a file.
                           -->
                  <RegistryValue Root="HKCU" Key="Software\[Manufacturer]\[ProductName]\VS2008AddInFile" Name="Installed"
                                 Type="integer" Value="1" KeyPath="yes"/>

                </Component>

              </Directory>

            </Directory>

            <Directory Id="Dir100Id" Name="10.0">

              <Directory Id="Dir100AddInsId" Name="AddIns">

                <Component Id="VS2010AddInFileComponentId" Guid="$(var.VS2010_ADDIN_FILE_COMPONENT_GUID)">

                  <!-- Copy the .AddIn file to the folder -->
                  <File Id="VS2010AddInFileId" Name="$(var.ADDIN_XML_FILE_NAME)" Vital="yes" DiskId="1"
                        Source="$(var.ADDIN_XML_FILE_NAME_PATH)" />

                  <!-- Modify the Version XML element inside the .AddIn file whose Id is VS2010AddInFileId
                                to set the value "10.0" (which is the version of VS 2010) -->
                  <util:XmlFile Id="VS2010SetVersionElement" Action="setValue" File="[#VS2010AddInFileId]"
                                ElementPath="/Extensibility/HostApplication/Version" Value="10.0" Sequence="1" />

                  <!-- Modify the Assembly XML element inside the .AddIn file whose Id is VS2010AddInFileId
                                to set value of the file whose Id is VS2010DllFileId -->
                  <util:XmlFile Id="VS2010SetAssemblyElement" Action="setValue" File="[#VS2010AddInFileId]"
                                ElementPath="/Extensibility/Addin/Assembly" Value="[#VS2010DllFileId]" Sequence="1" />

                  <!-- Modify the FullClassName XML element inside the .AddIn file whose Id is VS2010AddInFileId
                                to set value of the variable CONNECT_CLASS_FULL_NAME_VS_2010 -->
                  <util:XmlFile Id="VS2010SetFullClassNameElement" Action="setValue" File="[#VS2010AddInFileId]"
                                ElementPath="/Extensibility/Addin/FullClassName"
                                Value="$(var.CONNECT_CLASS_FULL_NAME_VS_2010)" Sequence="1" />

                  <!-- This registry entry used as KeyPath is required to avoid the following warnings:
                                ICE38: Component <x> installs to user profile. It must use a registry key under HKCU as its KeyPath not a file.
                           -->
                  <RegistryValue Root="HKCU" Key="Software\[Manufacturer]\[ProductName]\VS2010AddInFile" Name="Installed"
                                 Type="integer" Value="1" KeyPath="yes"/>

                </Component>

              </Directory>

            </Directory>
            <Directory Id="Dir110Id" Name="11.0">

              <Directory Id="Dir110AddInsId" Name="AddIns">

                <Component Id="VS2012AddInFileComponentId" Guid="$(var.VS2012_ADDIN_FILE_COMPONENT_GUID)">

                  <!-- Copy the .AddIn file to the folder -->
                  <File Id="VS2012AddInFileId" Name="$(var.ADDIN_XML_FILE_NAME)" Vital="yes" DiskId="1"
                        Source="$(var.ADDIN_XML_FILE_NAME_PATH)" />

                  <!-- Modify the Version XML element inside the .AddIn file whose Id is VS2010AddInFileId
                                to set the value "10.0" (which is the version of VS 2010) -->
                  <util:XmlFile Id="VS2012SetVersionElement" Action="setValue" File="[#VS2012AddInFileId]"
                                ElementPath="/Extensibility/HostApplication/Version" Value="11.0" Sequence="1" />

                  <!-- Modify the Assembly XML element inside the .AddIn file whose Id is VS2010AddInFileId
                                to set value of the file whose Id is VS2010DllFileId -->
                  <util:XmlFile Id="VS2012SetAssemblyElement" Action="setValue" File="[#VS2012AddInFileId]"
                                ElementPath="/Extensibility/Addin/Assembly" Value="[#VS2012DllFileId]" Sequence="1" />

                  <!-- Modify the FullClassName XML element inside the .AddIn file whose Id is VS2010AddInFileId
                                to set value of the variable CONNECT_CLASS_FULL_NAME_VS_2010 -->
                  <util:XmlFile Id="VS2012SetFullClassNameElement" Action="setValue" File="[#VS2012AddInFileId]"
                                ElementPath="/Extensibility/Addin/FullClassName"
                                Value="$(var.CONNECT_CLASS_FULL_NAME_VS_2012)" Sequence="1" />

                  <!-- This registry entry used as KeyPath is required to avoid the following warnings:
                                ICE38: Component <x> installs to user profile. It must use a registry key under HKCU as its KeyPath not a file.
                           -->
                  <RegistryValue Root="HKCU" Key="Software\[Manufacturer]\[ProductName]\VS2012AddInFile" Name="Installed"
                                 Type="integer" Value="1" KeyPath="yes"/>

                </Component>

              </Directory>

            </Directory>
            <!-- 2012-->
          </Directory>

        </Directory>

      </Directory>

      <!-- Install the shortcuts to the help file, web site and uninstaller in the  
              ProgramMenuFolder folder, that for an installation for the current user like this maps to CSIDL_PROGRAMS
         -->
      <Directory Id="ProgramMenuFolder">

        <Directory Id="AddInStartMenuFolderId" Name="$(var.DEFAULT_GROUP_NAME)">

          <!--Component Id="HelpFileShortcutComponentId" Guid="$(var.HELP_FILE_SHORTCUT_COMPONENT_GUID)">

     

            <Shortcut Id="HelpFileShortcutId" Name="$(var.APP_NAME)" Description="$(var.APP_NAME)"
                      Target="[INSTALLLOCATION]$(var.HELP_FILE_NAME)" WorkingDirectory="INSTALLLOCATION"/>

            -->
          <!-- Create the shortcut to the web site -->
          <!--
            <util:InternetShortcut Id="WebSiteShortcutId" Name="$(var.MY_COMPANY_NAME) Web Site"
                                   Target="$(var.MY_COMPANY_WEB_SITE)" />

            -->
          <!-- Create the shorcut to the uninstaller -->
          <!--
            <Shortcut Id="UninstallProduct" Name="Uninstall $(var.APP_NAME)" Target="[SystemFolder]msiexec.exe"
                Arguments="/x [ProductCode]" Description="Uninstalls $(var.APP_NAME)" />


            -->
          <!-- Ensure that the folder is removed when uninstalling -->
          <!--
            <RemoveFolder Id="AddInStartMenuFolderId" On="uninstall"/>


            -->
          <!-- This registry entry used as KeyPath is required to avoid the following warnings:
                  ICE38: Component <x> installs to user profile. It must use a registry key under HKCU as
                         its KeyPath not a file.
                  ICE43: Component HelpFileShortcutComponentId has non-advertised shortcuts. It should use
                         a registry key under HKCU as its KeyPath, not a file.
                  -->
          <!--
            <RegistryValue Root="HKCU" Key="Software\[Manufacturer]\[ProductName]\HelpFileShortcut" Name="Installed"
                           Type="integer" Value="1" KeyPath="yes"/>

          </Component>-->

        </Directory>

      </Directory>

    </Directory>

    <!-- Create the tree of features of the setup:
           - A root feature that is always shown (Level=1), expanded, mandatory (can't be absent)
             and that can't be installed on first use (that is, can't be advertised)
           - 3 child optional features
      -->
    <Feature Id="VSCommonFeatureId" Title="$(var.APP_NAME)" Level="1" AllowAdvertise="no"
             Description="Common files of the add-in." Display="expand" Absent="disallow">

      <!-- The root feature includes the license agreement, the help file and its shortcut  -->
      <ComponentRef Id="LicenseAgreementFileComponentId" />
      <!--<ComponentRef Id="HelpFileComponentId" />
      <ComponentRef Id="HelpFileShortcutComponentId" />-->
      <ComponentRef Id="ICSharpCode" />

     
    <!-- This child feature is the add-in for Visual Studio 2008 -->
      <Feature Id="VS2008InstallationFeatureId" Title="Visual Studio 2008"
               Description="Installs the add-in for Visual Studio 2008." Level="1" AllowAdvertise="no">

        <!-- The feature is hidden (Level is set to 0) when Visual Studio 2008 is not installed and
                 it is the first installation (not in maintenance mode)
            -->
        <Condition Level="0">NOT Installed AND NOT VS2008INSTALLATIONFOLDER</Condition>

        <!-- Its components are the add-in dll and the .AddIn XML file for Visual Studio 2008 -->
        <ComponentRef Id="VS2008DllFileComponentId" />
        <ComponentRef Id="VS2008AddInFileComponentId" />


      </Feature>

      <!-- This child feature is the add-in for Visual Studio 2010 -->
      <Feature Id="VS2010InstallationFeatureId" Title="Visual Studio 2010"
               Description="Installs the add-in for Visual Studio 2010." Level="1" AllowAdvertise="no">

        <!-- The feature is hidden (Level is set to 0) when Visual Studio 2010 is not installed and
                 it is the first installation (not in maintenance mode)
            -->
        <Condition Level="0">NOT Installed AND NOT VS2010INSTALLATIONFOLDER</Condition>

        <!-- Its components are the add-in dll and the .AddIn XML file for Visual Studio 2010 -->
        <ComponentRef Id="VS2010DllFileComponentId" />
        <ComponentRef Id="VS2010AddInFileComponentId" />

      </Feature>

      <!-- This child feature is the add-in for Visual Studio 2010 -->
      <Feature Id="VS2012InstallationFeatureId" Title="Visual Studio 2012"
               Description="Installs the add-in for Visual Studio 2012." Level="1" AllowAdvertise="no">

        <!-- The feature is hidden (Level is set to 0) when Visual Studio 2010 is not installed and
                 it is the first installation (not in maintenance mode)
            -->
        <Condition Level="0">NOT Installed AND NOT VS2012INSTALLATIONFOLDER</Condition>

        <!-- Its components are the add-in dll and the .AddIn XML file for Visual Studio 2010 -->
        <ComponentRef Id="VS2012DllFileComponentId" />
        <ComponentRef Id="VS2012AddInFileComponentId" />

      </Feature>

    </Feature>

    

    <!-- Custom action to remove the commands of Visual Studio 2008 when uninstalling the add-in -->

    <CustomAction Id="RemoveVS2008AddInCommands" Script="vbscript" Execute="deferred" Return="ignore">
      <![CDATA[
            Set dte = CreateObject("VisualStudio.DTE.9.0")
            For Each cmd In dte.Commands
               If InStr(cmd, "$(var.CONNECT_CLASS_FULL_NAME_VS_2008)") <> 0 Then
                  cmd.Delete()
               End If
            Next
            dte.Quit()
         ]]>
    </CustomAction>

    <!-- Custom action to remove the commands of Visual Studio 2010 when uninstalling the add-in -->

    <CustomAction Id="RemoveVS2010AddInCommands" Script="vbscript" Execute="deferred" Return="ignore">
      <![CDATA[
            Set dte = CreateObject("VisualStudio.DTE.10.0")
            For Each cmd In dte.Commands
               If InStr(cmd, "$(var.CONNECT_CLASS_FULL_NAME_VS_2010)") <> 0 Then
                  cmd.Delete()
               End If
            Next
            dte.Quit()
         ]]>
    </CustomAction>

    <!-- Custom action to remove the commands of Visual Studio 2010 when uninstalling the add-in -->

    <CustomAction Id="RemoveVS2012AddInCommands" Script="vbscript" Execute="deferred" Return="ignore">
      <![CDATA[
            Set dte = CreateObject("VisualStudio.DTE.11.0")
            For Each cmd In dte.Commands
               If InStr(cmd, "$(var.CONNECT_CLASS_FULL_NAME_VS_2012)") <> 0 Then
                  cmd.Delete()
               End If
            Next
            dte.Quit()
         ]]>
    </CustomAction>

    <InstallExecuteSequence>

      <!-- Execute the defined custom actions to remove the add-in commands from Visual Studio. They must execute when
              all the following conditions are true:
              - The setup has already been run
              - It is not an upgrade
              - Visual Studio is installed
              - The add-in feature state (!feature-state) for the Visual Studio version is installed (3 = INSTALLSTATE_LOCAL). See:
                Conditional Statement Syntax (http://msdn.microsoft.com/en-us/library/aa368012.aspx)
         -->
      
      <Custom Action="RemoveVS2008AddInCommands"
              After="RemoveFiles">
        Installed AND NOT UPGRADINGPRODUCTCODE AND VS2008INSTALLATIONFOLDER
        AND !VS2008InstallationFeatureId=3
      </Custom>

      <Custom Action="RemoveVS2010AddInCommands"
              After="RemoveFiles">
        Installed AND NOT UPGRADINGPRODUCTCODE AND VS2010INSTALLATIONFOLDER
        AND !VS2010InstallationFeatureId=3
      </Custom>

      <Custom Action="RemoveVS2012AddInCommands"
              After="RemoveFiles">
        Installed AND NOT UPGRADINGPRODUCTCODE AND VS2012INSTALLATIONFOLDER
        AND !VS2012InstallationFeatureId=3
      </Custom>

    </InstallExecuteSequence>

    <!-- Use the built-in User interface of the WixUIExtension reference that shows a treeview with features -->
    <UIRef Id="WixUI_FeatureTree" />

    <!-- Includes a license agreement step in the setup -->
    <WixVariable Id="WixUILicenseRtf" Value="$(var.LICENSE_AGREEMENT_FILE_NAME)"/>
    <!--<WixVariable Id="WixUIDialogBmp" Value="dlgbmp.bmp" />-->
  </Product>

</Wix>